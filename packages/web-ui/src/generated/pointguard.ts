/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/version": {
    get: {
      responses: {
        /** @description plain text */
        200: {
          content: {
            "text/plain; charset=utf-8": unknown;
          };
        };
        /** @description plain text */
        default: {
          content: {
            "text/plain; charset=utf-8": unknown;
          };
        };
      };
    };
  };
  "/api/v1/tasks": {
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The data that will be passed on execution. */
            data?: unknown;
            /**
             * Format: uri
             * @description The pointguard endpoint that'll be invoked
             */
            endpoint: string;
            /** @description The job name. This is used to know which function to invoke. */
            jobName: string;
            /** Format: uint */
            maxRetries?: number | null;
            /** @description A name for the task. If not provided, a random name will be generated. This is useful to throttle tasks of the same type. */
            name?: string | null;
            /**
             * Format: date-time
             * @description When to run the task. If not provided, it'll run as soon as possible.
             */
            runAt?: string | null;
          };
        };
      };
      responses: {
        200: {
          content: {
            "application/json": number;
          };
        };
        /** @description plain text */
        default: {
          content: {
            "text/plain; charset=utf-8": unknown;
          };
        };
      };
    };
  };
  "/api/v1/tasks/{id}/cancel": {
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description plain text */
        default: {
          content: {
            "text/plain; charset=utf-8": unknown;
          };
        };
      };
    };
  };
  "/api/v1/tasks/enqueued": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": ({
                /** Format: date-time */
                createdAt: string;
                data: unknown;
                endpoint: string;
                /** Format: int64 */
                id: number;
                jobName: string;
                /** Format: int32 */
                maxRetries: number;
                name: string;
                /** Format: int32 */
                retryCount: number;
                /** Format: date-time */
                runAt: string;
                workerId?: string | null;
              })[];
          };
        };
        /** @description plain text */
        default: {
          content: {
            "text/plain; charset=utf-8": unknown;
          };
        };
      };
    };
  };
  "/api/v1/tasks/finished": {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
        };
      };
      responses: {
        200: {
          content: {
            "application/json": {
              items: ({
                  /** Format: date-time */
                  createdAt: string;
                  data: unknown;
                  endpoint: string;
                  errorMessage?: string | null;
                  /** Format: int64 */
                  id: number;
                  jobName: string;
                  name: string;
                  /** Format: int32 */
                  retries: number;
                  /** Format: date-time */
                  startedAt: string;
                })[];
              /** Format: uint */
              page: number;
              /** Format: uint */
              totalPages: number;
            };
          };
        };
        /** @description plain text */
        default: {
          content: {
            "text/plain; charset=utf-8": unknown;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
